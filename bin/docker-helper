#!/usr/bin/env bash

readonly PROJECT_ID=010001111
readonly PROJECT=bolt
readonly PROJECT_IN_UPPERCASE="$(printf "%s" "$PROJECT" | tr '[:lower:]' '[:upper:]')"
readonly SCRIPT_SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

helper ()
{
  if [[ $# -gt 0 ]] && [[ "$1" != '-' ]]; then
    printf "%s: illegal option -- %s" "$0" "$@"
    printf "\n"
  fi

  printf "Usage: %s [COMMANDS]\n" "$0"
  printf "\n"
  printf "Commands:\n"
  printf "  build      build the %s docker containers\n" "$PROJECT_IN_UPPERCASE"
  printf "  destroy    stop and delete all of the %s docker containers\n" "$PROJECT_IN_UPPERCASE"
  printf "  exec       execute a command in a running docker container\n"
  printf "  help       show this helper text\n"
  printf "  shell      get a shell in a running docker container\n"
  printf "  start      start the %s docker containers\n" "$PROJECT_IN_UPPERCASE"
  printf "  status     outputs the status of all docker containers in the environment\n"
  printf "  stop       stops the %s docker containers\n" "$PROJECT_IN_UPPERCASE"
  printf "\n"
}

cd "$SCRIPT_SOURCE_DIR/.." || exit
# shellcheck source=lib/docker-utilities
source "$SCRIPT_SOURCE_DIR/lib/docker-utilities" || exit

if [[ "$(is_docker_running)" == 'false' ]]; then
  printf "Please make sure that docker is installed and running.\n"
  printf "\n"

  exit 1
fi

# get details on the project containers
are_containers_built=$(are_containers_built $PROJECT_ID-$PROJECT)
are_containers_running=$(are_containers_running $PROJECT_ID-$PROJECT)

# check the first script parameter for a command
case $1 in
build|compose|up)
  docker-compose up --build -d
  ;;
destroy|down)
  docker-compose down --rmi all --remove-orphans
  ;;
help|'/?'|'-h'|'/h'|'--help'|'/help')
  helper
  ;;
exec|shell|ssh)
  if [[ "$are_containers_built" == 'false' ]]; then
    printf "\n"
    printf "No %s containers are built. Try running: \`%s build\`\n" "$PROJECT_IN_UPPERCASE" "$0"
    printf "\n"

    exit
  fi

  if [[ "$are_containers_running" == 'false' ]]; then
    printf "\n"
    printf "No %s containers are started. Try running: \`%s start\`\n" "$PROJECT_IN_UPPERCASE" "$0"
    printf "\n"

    exit
  fi

  if [[ -z "$2" ]]; then
    printf "\n"
    printf "No %s container was specified. Try running: \`%s %s \$CONTAINER-NAME\` where\n" "$PROJECT_IN_UPPERCASE" "$0" "$1"
    printf "\$CONTAINER-NAME is one of the following:"
    printf "\n"
    list_project_containers "$PROJECT_ID-$PROJECT"
    printf "\n"

    exit
  fi

  if [[ "$1" == "exec" ]] && [[ -z "$3" ]]; then
    printf "\n"
    printf "You must specify a command to run inside of the container. Try running \`%s %s %s ls /\`\n" "$0" "$1" "$2"
    printf "\n"

    exit
  fi

  if [[ "$1" == "shell" ]] || [[ "$1" == "ssh" ]]; then
    docker-compose exec "$2" /bin/sh

    exit
  fi

  shift
  docker exec -i "$@"
  ;;
start)
  if [[ "$are_containers_running" == 'true' ]]; then
    printf "\n"
    printf "%s containers are already started. Try running: \`%s status\`\n" "$PROJECT_IN_UPPERCASE" "$0"
    printf "\n"

    exit
  fi

  if [[ "$are_containers_built" == 'false' ]]; then
    printf "\n"
    printf "No %s containers are built. Try running: \`%s build\`\n" "$PROJECT_IN_UPPERCASE" "$0"
    printf "\n"

    exit
  fi

  docker-compose start
  ;;
status)
  if [[ "$are_containers_built" == 'false' ]]; then
    printf "\n"
    printf "No %s containers are built. Try running: \`%s build\`\n" "$PROJECT_IN_UPPERCASE" "$0"
    printf "\n"

    exit
  fi

  if [[ "$are_containers_running" == 'false' ]]; then
    printf "\n"
    printf "No %s containers are started. Try running: \`%s start\`\n" "$PROJECT_IN_UPPERCASE" "$0"
    printf "\n"

    exit
  fi

  docker ps -a --filter name="$PROJECT_ID-$PROJECT"
  ;;
stop|halt)
  if [[ "$are_containers_running" == 'false' ]]; then
    printf "\n"
    printf "No %s containers are started. Try running: \`%s start\`\n" "$PROJECT_IN_UPPERCASE" "$0"
    printf "\n"

    exit
  fi

  docker-compose stop
  ;;
*)
  helper "$@"

  exit 1
esac
